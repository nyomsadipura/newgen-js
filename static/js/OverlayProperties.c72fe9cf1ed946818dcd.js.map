{"version":3,"sources":["components/Properties/ListviewOverlayPropertiesJson.jsx","components/IFormDesignerLayout/IFormDesignerComponents/AdvanceListviewProperties/OverlayProperties.jsx"],"names":["ListviewOverlayPropertiesJson","OverlayProperties","props","handleCombo","comboId","select","document","getElementById","propertyName","getAttribute","optionTag","options","selectedIndex","handleProperty","value","propertyValue","formData","overlayStyle","applyChanges","ControlsMap","CollapsibleItems","Object","keys","forEach","key","index","collapseComponentBody","property","type","push","prepareHtmlTag","_jsx","CollapsibleComponent","id","heading","body","colId","colStyle","toLowerCase","_jsxs","className","styles","parentDiv2","children","leftLabel","label","RightLabelSelectDiv1","RightLabelSelect1Combo","name","selectedControl","onChange","map","optionTagData","optionCount","Value","selected","Title","join","ColorPicker","color","ToggleBtn","toggleState","handleToggle","e","textAreaParentDiv","defaultValue","textAreaDiv","event","target","_Fragment","ControlLabel","Card","Body","cardBodyButtonProperties","item"],"mappings":"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","file":"static/js/OverlayProperties.c72fe9cf1ed946818dcd.js","sourcesContent":["const ListviewOverlayPropertiesJson = {\r\n    \r\n    \"Basic\" : {\r\n        \"ListviewOverlayTitle\": \"\",\r\n        \"OverlayBackground\" : \"\",\r\n        \"OverlayButtonAlignment\" : \"\",\r\n        \"EditOption\" : \"\"\r\n    },\r\n    \"Title\" :{ \r\n        \"ShowTitle\" : \"\",\r\n        \"FontFamily\" : \"\",\r\n        \"FontSize\" : \"\",\r\n        \"FontStyle\" : \"\"\r\n    },\r\n    \r\n\r\n                 \r\n}\r\n\r\nexport default ListviewOverlayPropertiesJson;\r\n","import React,{useState} from 'react'\r\nimport {Card,Row,Col} from 'react-bootstrap'\r\nimport ControlsMap from '../../../Properties/PropertiesConfiguration'\r\nimport ListviewOverlayPropertiesJson from \"../../../Properties/ListviewOverlayPropertiesJson\"\r\nimport CollapsibleComponent from \"../../../../ReusableComponents/CollapseCard/CollapseCard\";\r\nimport styles from \"../../../LeftNavigation/DesignerControls/BasicControls.module.css\"\r\nimport ColorPicker from \"../../../../ReusableComponents/ColorPicker/ColorPicker\"\r\nimport ToggleBtn from \"../../../../ReusableComponents/ToggleBtn/ToggleBtn\"\r\n\r\nimport ControlLabel from '../../../../ReusableComponents/ControlLabel/ControlLabel';\r\n\r\nconst OverlayProperties=(props)=>{\r\n    \r\n    function handleCombo(comboId){\r\n       var select = document.getElementById(comboId);\r\n       var propertyName = select.getAttribute(\"name\");\r\n       var optionTag = select.options[select.selectedIndex];\r\n       handleProperty(propertyName, optionTag.value);\r\n    }\r\n    function handleProperty(propertyName, propertyValue){\r\n        if(props &&props.formData){\r\n        if(propertyName===\"OverlayButtonAlignment\"){\r\n            if(propertyValue === \"right\")\r\n                delete  props.formData.overlayStyle[propertyName+\"left\"];\r\n            else {\r\n            delete  props.formData.overlayStyle[propertyName+\"right\"]; }\r\n\r\n            props.formData.overlayStyle[propertyName+propertyValue] = \"4px\";\r\n        }else{\r\n            props.formData.overlayStyle[propertyName] = propertyValue;\r\n        }   \r\n        props.applyChanges(props.formData); \r\n        }\r\n    }\r\n       \r\n\r\n\r\n\r\n  if(ListviewOverlayPropertiesJson && ControlsMap){\r\n    var CollapsibleItems = [];\r\n    Object.keys(ListviewOverlayPropertiesJson).forEach((key,index)=>{\r\n        var collapseComponentBody = [];\r\n        Object.keys(ListviewOverlayPropertiesJson[key]).forEach((property)=>{ \r\n            if(ControlsMap[property] && ControlsMap[property].type){ \r\n               collapseComponentBody.push(prepareHtmlTag(property,ControlsMap[property].type));\r\n             }\r\n        })\r\n        if(CollapsibleItems=== []){\r\n            CollapsibleItems.push(<CollapsibleComponent id={index+\"\"} heading={key} body={collapseComponentBody}/>);\r\n        }\r\n\r\n        CollapsibleItems.push(<CollapsibleComponent id={index+\"\"} heading={key} body={collapseComponentBody}/>);\r\n    })\r\n    }\r\n    function prepareHtmlTag(key,type, colId, colStyle) {\r\n        \r\n            switch(type.toLowerCase()){\r\n                case \"combo\" : return (\r\n                            <div className={styles.parentDiv2}>\r\n                    <span className={styles.leftLabel}>{ControlsMap[key].label}</span>\r\n                    <div className={styles.RightLabelSelectDiv1}>\r\n                        <select className={styles.RightLabelSelect1Combo} name={key} id={props.selectedControl.id+key} onChange={()=>handleCombo(props.selectedControl.id+key)}>\r\n                        {ControlsMap[key].children.map((optionTagData,optionCount)=>{\r\n                            if(ControlsMap[key].children[optionCount].Value){\r\n                                if(props && props.formData && props.formData.overlayStyle && props.formData.overlayStyle[key] ===ControlsMap[key].children[optionCount].Value){\r\n                                    return <option value={ControlsMap[key].children[optionCount].Value} selected>{ControlsMap[key].children[optionCount].Title}</option>\r\n                            }\r\n                            else {\r\n                                return <option value={ControlsMap[key].children[optionCount].Value}>{ControlsMap[key].children[optionCount].Title}</option>\r\n                            }\r\n                        }\r\n                        })}\r\n                        </select>\r\n                    </div>\r\n                    </div>\r\n                        )\r\n                    \r\n\r\n                case \"colorpicker\" : return(\r\n                    // <div className={styles.parentDiv}>\r\n                    //     <span className={styles.leftLabel}>{ControlsMap[key].label}</span>\r\n                    //     <div className={styles.RightLabelColorPickerDiv}>\r\n                    //         <ColorPicker handleStyleChange={(hexValue)=>handleProperty(key, hexValue)}/>\r\n                    //     </div>\r\n                    // </div>\r\n                    <div className={[\"colorpicker\",styles.parentDiv2].join(\" \")}>\r\n                        {ControlsMap[key].label}\r\n                        <ColorPicker  color={props && props.formData && props.formData.overlayStyle ? props.formData.overlayStyle[key] : null} handleProperty={handleProperty} propertyName={key} />\r\n                    </div>\r\n                )\r\n\r\n                case \"toggle\" : return(\r\n                <div className={styles.parentDiv2}>\r\n                        <span className={styles.leftLabel} >{ControlsMap[key].label}</span>\r\n                        <ToggleBtn toggleState={props && props.formData && props.formData.overlayStyle ? props.formData.overlayStyle[key] : null} handleToggle={(value,e)=>handleProperty(key, value)}/> \r\n                    </div>\r\n                )\r\n\r\n                case \"textarea\" : return(\r\n                <div className={styles.textAreaParentDiv}>\r\n                        <span className={styles.leftLabel}>{ControlsMap[key].label}</span>\r\n                        <div>\r\n                        <textarea\r\n                        aria-label={ControlsMap[key].label}\r\n                         defaultValue={props && props.formData && props.formData.overlayStyle ? props.formData.overlayStyle[key] : null} className={styles.textAreaDiv} onChange={(event)=>handleProperty(ControlsMap[key].label,event.target.value)}/>\r\n                        </div>\r\n                    </div>\r\n                )\r\n                \r\n        }\r\n\r\n    }\r\n\r\n\r\nreturn (\r\n        <>\r\n        <ControlLabel label=\"Listview Overlay\" />\r\n        <div className=\"propertiesBody\">\r\n        <Card.Body className={styles.cardBodyButtonProperties}>\r\n            {\r\n                CollapsibleItems.map((item,index)=>{\r\n                    return item;\r\n                })\r\n            }\r\n        </Card.Body>\r\n        </div>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default OverlayProperties;"],"sourceRoot":""}